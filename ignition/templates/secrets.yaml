{{- if and
  (empty .Values.commissioning.auth.existingSecret)
  (not (empty .Values.commissioning.auth.adminUsername))
}}
{{- $gatewayAdminSecretName := include "ignition.gateway.gatewayAdminSecret" . }}
{{- $gatewayAdminSecretKey := .Values.commissioning.auth.adminPasswordKey }}

{{- /* Lookup the existing secret value if we've generated it before so we don't always regenerate */ -}}
{{- $gatewayAdminSecretObj := (lookup "v1" "Secret" .Release.Namespace $gatewayAdminSecretName) | default dict }}
{{- $gatewayAdminSecretData := (get $gatewayAdminSecretObj "data") | default dict }}
{{- $gatewayAdminSecret := (get $gatewayAdminSecretData $gatewayAdminSecretKey) | default 
  ((coalesce (include "ignition.gateway.envValue" (list . "GATEWAY_ADMIN_PASSWORD")) (randAlphaNum 32)) | b64enc) }}

apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ $gatewayAdminSecretName }}
  labels:
    {{- include "ignition.labels" . | nindent 4 }}
  annotations:
  {{- with .Values.commissioning.auth.secretResourcePolicy }}
    "helm.sh/resource-policy": {{ . | quote }}
  {{- end }}
data:
  {{ $gatewayAdminSecretKey }}: {{ $gatewayAdminSecret | quote }}
{{- end }}

{{- if and 
  (empty .Values.gateway.gan.keystoreExistingSecret) 
  .Values.certManager.enabled
  .Values.certManager.ganCertificate.create
}}
{{- $metroKeystoreSecretName := include "ignition.gateway.ganKeystoreSecret" . }}
{{- $metroKeystoreSecretKey := .Values.gateway.gan.keystorePasswordKey }}

{{- /* Lookup the existing secret value if we've generated it before so we don't always regenerate */ -}}
{{- $metroKeystoreSecretObj := (lookup "v1" "Secret" .Release.Namespace $metroKeystoreSecretName) | default dict }}
{{- $metroKeystoreSecretData := (get $metroKeystoreSecretObj "data") | default dict }}
{{- $metroKeystoreSecret := (get $metroKeystoreSecretData $metroKeystoreSecretKey) | default "bWV0cm8=" }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $metroKeystoreSecretName }}
  labels:
    {{- include "ignition.labels" . | nindent 4 }}
  annotations:
  {{- with .Values.gateway.gan.secretResourcePolicy }}
    "helm.sh/resource-policy": {{ . | quote }}
  {{- end }}
type: Opaque
data:
  {{ $metroKeystoreSecretKey }}: {{ $metroKeystoreSecret | quote }}
{{- end }}

{{- if and (empty .Values.gateway.tls.keystoreExistingSecret) .Values.gateway.tls.enabled }}
{{- $tlsKeystoreSecretName := include "ignition.gateway.tlsKeystoreSecret" . }}
{{- $tlsKeystoreSecretKey := .Values.gateway.tls.keystorePasswordKey }}

{{- /* Lookup the existing secret value if we've generated it before so we don't always regenerate */ -}}
{{- $tlsKeystoreSecretObj := (lookup "v1" "Secret" .Release.Namespace $tlsKeystoreSecretName) | default dict }}
{{- $tlsKeystoreSecretData := (get $tlsKeystoreSecretObj "data") | default dict }}
{{- $tlsKeystoreSecret := (get $tlsKeystoreSecretData $tlsKeystoreSecretKey) | default "aWduaXRpb24=" }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $tlsKeystoreSecretName }}
  labels:
    {{- include "ignition.labels" . | nindent 4 }}
  annotations:
  {{- with .Values.gateway.tls.secretResourcePolicy }}
    "helm.sh/resource-policy": {{ . | quote }}
  {{- end }}
type: Opaque
data:
  {{ $tlsKeystoreSecretKey }}: {{ $tlsKeystoreSecret | quote }}
{{- end }}
